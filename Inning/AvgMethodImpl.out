
@SubTask(name = "avgRuns ", sequence = 1, ignoreException = false, hawkParam = "var innings,var runs ")public     double avgRuns (Object ... args ){Set<Inning> input = null;if ( args[0] != null){input  = (Set<Inning> ) args[0];}Set<Inning> tmpSet = null;if(input != null && !input.isEmpty() ){tmpSet = input;}else{tmpSet = this.getInnings().getAll();}int i =0;BigDecimal total = BigDecimal.ZERO;double avg = 0.0;for(Inning inning : tmpSet){total = total.add(new BigDecimal(inning.getRuns ()));i++;}if(i > 0){avg = total.divide(new BigDecimal(i),2, RoundingMode.HALF_UP).doubleValue();}return avg;}


@SubTask(name = "avgMins ", sequence = 1, ignoreException = false, hawkParam = "var innings,var mins ")public     double avgMins (Object ... args ){Set<Inning> input = null;if ( args[0] != null){input  = (Set<Inning> ) args[0];}Set<Inning> tmpSet = null;if(input != null && !input.isEmpty() ){tmpSet = input;}else{tmpSet = this.getInnings().getAll();}int i =0;BigDecimal total = BigDecimal.ZERO;double avg = 0.0;for(Inning inning : tmpSet){total = total.add(new BigDecimal(inning.getMins ()));i++;}if(i > 0){avg = total.divide(new BigDecimal(i),2, RoundingMode.HALF_UP).doubleValue();}return avg;}


@SubTask(name = "avgBallFaced ", sequence = 1, ignoreException = false, hawkParam = "var innings,var ballFaced ")public     double avgBallFaced (Object ... args ){Set<Inning> input = null;if ( args[0] != null){input  = (Set<Inning> ) args[0];}Set<Inning> tmpSet = null;if(input != null && !input.isEmpty() ){tmpSet = input;}else{tmpSet = this.getInnings().getAll();}int i =0;BigDecimal total = BigDecimal.ZERO;double avg = 0.0;for(Inning inning : tmpSet){total = total.add(new BigDecimal(inning.getBallFaced ()));i++;}if(i > 0){avg = total.divide(new BigDecimal(i),2, RoundingMode.HALF_UP).doubleValue();}return avg;}


@SubTask(name = "avgFours ", sequence = 1, ignoreException = false, hawkParam = "var innings,var fours ")public     double avgFours (Object ... args ){Set<Inning> input = null;if ( args[0] != null){input  = (Set<Inning> ) args[0];}Set<Inning> tmpSet = null;if(input != null && !input.isEmpty() ){tmpSet = input;}else{tmpSet = this.getInnings().getAll();}int i =0;BigDecimal total = BigDecimal.ZERO;double avg = 0.0;for(Inning inning : tmpSet){total = total.add(new BigDecimal(inning.getFours ()));i++;}if(i > 0){avg = total.divide(new BigDecimal(i),2, RoundingMode.HALF_UP).doubleValue();}return avg;}


@SubTask(name = "avgSixes ", sequence = 1, ignoreException = false, hawkParam = "var innings,var sixes ")public     double avgSixes (Object ... args ){Set<Inning> input = null;if ( args[0] != null){input  = (Set<Inning> ) args[0];}Set<Inning> tmpSet = null;if(input != null && !input.isEmpty() ){tmpSet = input;}else{tmpSet = this.getInnings().getAll();}int i =0;BigDecimal total = BigDecimal.ZERO;double avg = 0.0;for(Inning inning : tmpSet){total = total.add(new BigDecimal(inning.getSixes ()));i++;}if(i > 0){avg = total.divide(new BigDecimal(i),2, RoundingMode.HALF_UP).doubleValue();}return avg;}


@SubTask(name = "avgStrikeRate ", sequence = 1, ignoreException = false, hawkParam = "var innings,var strikeRate ")public     double avgStrikeRate (Object ... args ){Set<Inning> input = null;if ( args[0] != null){input  = (Set<Inning> ) args[0];}Set<Inning> tmpSet = null;if(input != null && !input.isEmpty() ){tmpSet = input;}else{tmpSet = this.getInnings().getAll();}int i =0;BigDecimal total = BigDecimal.ZERO;double avg = 0.0;for(Inning inning : tmpSet){total = total.add(new BigDecimal(inning.getStrikeRate ()));i++;}if(i > 0){avg = total.divide(new BigDecimal(i),2, RoundingMode.HALF_UP).doubleValue();}return avg;}


@SubTask(name = "avgPositions ", sequence = 1, ignoreException = false, hawkParam = "var innings,var positions ")public     double avgPositions (Object ... args ){Set<Inning> input = null;if ( args[0] != null){input  = (Set<Inning> ) args[0];}Set<Inning> tmpSet = null;if(input != null && !input.isEmpty() ){tmpSet = input;}else{tmpSet = this.getInnings().getAll();}int i =0;BigDecimal total = BigDecimal.ZERO;double avg = 0.0;for(Inning inning : tmpSet){total = total.add(new BigDecimal(inning.getPositions ()));i++;}if(i > 0){avg = total.divide(new BigDecimal(i),2, RoundingMode.HALF_UP).doubleValue();}return avg;}


@SubTask(name = "avgInnings ", sequence = 1, ignoreException = false, hawkParam = "var innings,var innings ")public     double avgInnings (Object ... args ){Set<Inning> input = null;if ( args[0] != null){input  = (Set<Inning> ) args[0];}Set<Inning> tmpSet = null;if(input != null && !input.isEmpty() ){tmpSet = input;}else{tmpSet = this.getInnings().getAll();}int i =0;BigDecimal total = BigDecimal.ZERO;double avg = 0.0;for(Inning inning : tmpSet){total = total.add(new BigDecimal(inning.getInnings ()));i++;}if(i > 0){avg = total.divide(new BigDecimal(i),2, RoundingMode.HALF_UP).doubleValue();}return avg;}


@SubTask(name = "avgOdi ", sequence = 1, ignoreException = false, hawkParam = "var innings,var odi ")public     double avgOdi (Object ... args ){Set<Inning> input = null;if ( args[0] != null){input  = (Set<Inning> ) args[0];}Set<Inning> tmpSet = null;if(input != null && !input.isEmpty() ){tmpSet = input;}else{tmpSet = this.getInnings().getAll();}int i =0;BigDecimal total = BigDecimal.ZERO;double avg = 0.0;for(Inning inning : tmpSet){total = total.add(new BigDecimal(inning.getOdi ()));i++;}if(i > 0){avg = total.divide(new BigDecimal(i),2, RoundingMode.HALF_UP).doubleValue();}return avg;}

