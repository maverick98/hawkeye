
@SubTask(name = "equalPlayer ", sequence = 1, ignoreException = false, hawkParam = "var innings,var player ")public     Set<Inning> equalPlayer (Object ... args ){Set<Inning> input = null;org.cricket.hawkeye.db.Player  player = null;if(args == null || args.length == 0){return null;}if(args.length == 2){if ( args[0] != null){input  = (Set<Inning> ) args[0];}if ( args[1] != null){player = ( org.cricket.hawkeye.db.Player ) args[1];}}else if(args.length == 1){player = ( org.cricket.hawkeye.db.Player ) args[0];}Set<Inning> result = new TreeSet<Inning>();for(Inning inning : this.getInnings().getAll()){if(inning.getPlayer ().equals(player )){result.add(inning);}}if(input != null && !input.isEmpty() ){if(input.retainAll(result)){result = input;}else{result = new TreeSet<Inning>();}}return result;}


@SubTask(name = "equalRuns ", sequence = 1, ignoreException = false, hawkParam = "var innings,var runs ")public     Set<Inning> equalRuns (Object ... args ){Set<Inning> input = null;java.lang.Integer  runs = null;if(args == null || args.length == 0){return null;}if(args.length == 2){if ( args[0] != null){input  = (Set<Inning> ) args[0];}if ( args[1] != null){runs = ( java.lang.Integer ) args[1];}}else if(args.length == 1){runs = ( java.lang.Integer ) args[0];}Set<Inning> result = new TreeSet<Inning>();for(Inning inning : this.getInnings().getAll()){if(inning.getRuns ().equals(runs )){result.add(inning);}}if(input != null && !input.isEmpty() ){if(input.retainAll(result)){result = input;}else{result = new TreeSet<Inning>();}}return result;}


@SubTask(name = "equalMins ", sequence = 1, ignoreException = false, hawkParam = "var innings,var mins ")public     Set<Inning> equalMins (Object ... args ){Set<Inning> input = null;java.lang.Integer  mins = null;if(args == null || args.length == 0){return null;}if(args.length == 2){if ( args[0] != null){input  = (Set<Inning> ) args[0];}if ( args[1] != null){mins = ( java.lang.Integer ) args[1];}}else if(args.length == 1){mins = ( java.lang.Integer ) args[0];}Set<Inning> result = new TreeSet<Inning>();for(Inning inning : this.getInnings().getAll()){if(inning.getMins ().equals(mins )){result.add(inning);}}if(input != null && !input.isEmpty() ){if(input.retainAll(result)){result = input;}else{result = new TreeSet<Inning>();}}return result;}


@SubTask(name = "equalBallFaced ", sequence = 1, ignoreException = false, hawkParam = "var innings,var ballFaced ")public     Set<Inning> equalBallFaced (Object ... args ){Set<Inning> input = null;java.lang.Integer  ballFaced = null;if(args == null || args.length == 0){return null;}if(args.length == 2){if ( args[0] != null){input  = (Set<Inning> ) args[0];}if ( args[1] != null){ballFaced = ( java.lang.Integer ) args[1];}}else if(args.length == 1){ballFaced = ( java.lang.Integer ) args[0];}Set<Inning> result = new TreeSet<Inning>();for(Inning inning : this.getInnings().getAll()){if(inning.getBallFaced ().equals(ballFaced )){result.add(inning);}}if(input != null && !input.isEmpty() ){if(input.retainAll(result)){result = input;}else{result = new TreeSet<Inning>();}}return result;}


@SubTask(name = "equalFours ", sequence = 1, ignoreException = false, hawkParam = "var innings,var fours ")public     Set<Inning> equalFours (Object ... args ){Set<Inning> input = null;java.lang.Integer  fours = null;if(args == null || args.length == 0){return null;}if(args.length == 2){if ( args[0] != null){input  = (Set<Inning> ) args[0];}if ( args[1] != null){fours = ( java.lang.Integer ) args[1];}}else if(args.length == 1){fours = ( java.lang.Integer ) args[0];}Set<Inning> result = new TreeSet<Inning>();for(Inning inning : this.getInnings().getAll()){if(inning.getFours ().equals(fours )){result.add(inning);}}if(input != null && !input.isEmpty() ){if(input.retainAll(result)){result = input;}else{result = new TreeSet<Inning>();}}return result;}


@SubTask(name = "equalSixes ", sequence = 1, ignoreException = false, hawkParam = "var innings,var sixes ")public     Set<Inning> equalSixes (Object ... args ){Set<Inning> input = null;java.lang.Integer  sixes = null;if(args == null || args.length == 0){return null;}if(args.length == 2){if ( args[0] != null){input  = (Set<Inning> ) args[0];}if ( args[1] != null){sixes = ( java.lang.Integer ) args[1];}}else if(args.length == 1){sixes = ( java.lang.Integer ) args[0];}Set<Inning> result = new TreeSet<Inning>();for(Inning inning : this.getInnings().getAll()){if(inning.getSixes ().equals(sixes )){result.add(inning);}}if(input != null && !input.isEmpty() ){if(input.retainAll(result)){result = input;}else{result = new TreeSet<Inning>();}}return result;}


@SubTask(name = "equalStrikeRate ", sequence = 1, ignoreException = false, hawkParam = "var innings,var strikeRate ")public     Set<Inning> equalStrikeRate (Object ... args ){Set<Inning> input = null;java.lang.Float  strikeRate = null;if(args == null || args.length == 0){return null;}if(args.length == 2){if ( args[0] != null){input  = (Set<Inning> ) args[0];}if ( args[1] != null){strikeRate = ( java.lang.Float ) args[1];}}else if(args.length == 1){strikeRate = ( java.lang.Float ) args[0];}Set<Inning> result = new TreeSet<Inning>();for(Inning inning : this.getInnings().getAll()){if(inning.getStrikeRate ().equals(strikeRate )){result.add(inning);}}if(input != null && !input.isEmpty() ){if(input.retainAll(result)){result = input;}else{result = new TreeSet<Inning>();}}return result;}


@SubTask(name = "equalPositions ", sequence = 1, ignoreException = false, hawkParam = "var innings,var positions ")public     Set<Inning> equalPositions (Object ... args ){Set<Inning> input = null;java.lang.Integer  positions = null;if(args == null || args.length == 0){return null;}if(args.length == 2){if ( args[0] != null){input  = (Set<Inning> ) args[0];}if ( args[1] != null){positions = ( java.lang.Integer ) args[1];}}else if(args.length == 1){positions = ( java.lang.Integer ) args[0];}Set<Inning> result = new TreeSet<Inning>();for(Inning inning : this.getInnings().getAll()){if(inning.getPositions ().equals(positions )){result.add(inning);}}if(input != null && !input.isEmpty() ){if(input.retainAll(result)){result = input;}else{result = new TreeSet<Inning>();}}return result;}


@SubTask(name = "equalDismissalType ", sequence = 1, ignoreException = false, hawkParam = "var innings,var dismissalType ")public     Set<Inning> equalDismissalType (Object ... args ){Set<Inning> input = null;org.cricket.hawkeye.codegen.constant.DismissalType  dismissalType = null;if(args == null || args.length == 0){return null;}if(args.length == 2){if ( args[0] != null){input  = (Set<Inning> ) args[0];}if ( args[1] != null){dismissalType = ( org.cricket.hawkeye.codegen.constant.DismissalType ) args[1];}}else if(args.length == 1){dismissalType = ( org.cricket.hawkeye.codegen.constant.DismissalType ) args[0];}Set<Inning> result = new TreeSet<Inning>();for(Inning inning : this.getInnings().getAll()){if(inning.getDismissalType ().equals(dismissalType )){result.add(inning);}}if(input != null && !input.isEmpty() ){if(input.retainAll(result)){result = input;}else{result = new TreeSet<Inning>();}}return result;}


@SubTask(name = "equalInnings ", sequence = 1, ignoreException = false, hawkParam = "var innings,var innings ")public     Set<Inning> equalInnings (Object ... args ){Set<Inning> input = null;java.lang.Integer  innings = null;if(args == null || args.length == 0){return null;}if(args.length == 2){if ( args[0] != null){input  = (Set<Inning> ) args[0];}if ( args[1] != null){innings = ( java.lang.Integer ) args[1];}}else if(args.length == 1){innings = ( java.lang.Integer ) args[0];}Set<Inning> result = new TreeSet<Inning>();for(Inning inning : this.getInnings().getAll()){if(inning.getInnings ().equals(innings )){result.add(inning);}}if(input != null && !input.isEmpty() ){if(input.retainAll(result)){result = input;}else{result = new TreeSet<Inning>();}}return result;}


@SubTask(name = "equalOpposition ", sequence = 1, ignoreException = false, hawkParam = "var innings,var opposition ")public     Set<Inning> equalOpposition (Object ... args ){Set<Inning> input = null;org.cricket.hawkeye.db.Country  opposition = null;if(args == null || args.length == 0){return null;}if(args.length == 2){if ( args[0] != null){input  = (Set<Inning> ) args[0];}if ( args[1] != null){opposition = ( org.cricket.hawkeye.db.Country ) args[1];}}else if(args.length == 1){opposition = ( org.cricket.hawkeye.db.Country ) args[0];}Set<Inning> result = new TreeSet<Inning>();for(Inning inning : this.getInnings().getAll()){if(inning.getOpposition ().equals(opposition )){result.add(inning);}}if(input != null && !input.isEmpty() ){if(input.retainAll(result)){result = input;}else{result = new TreeSet<Inning>();}}return result;}


@SubTask(name = "equalGround ", sequence = 1, ignoreException = false, hawkParam = "var innings,var ground ")public     Set<Inning> equalGround (Object ... args ){Set<Inning> input = null;org.cricket.hawkeye.db.Ground  ground = null;if(args == null || args.length == 0){return null;}if(args.length == 2){if ( args[0] != null){input  = (Set<Inning> ) args[0];}if ( args[1] != null){ground = ( org.cricket.hawkeye.db.Ground ) args[1];}}else if(args.length == 1){ground = ( org.cricket.hawkeye.db.Ground ) args[0];}Set<Inning> result = new TreeSet<Inning>();for(Inning inning : this.getInnings().getAll()){if(inning.getGround ().equals(ground )){result.add(inning);}}if(input != null && !input.isEmpty() ){if(input.retainAll(result)){result = input;}else{result = new TreeSet<Inning>();}}return result;}


@SubTask(name = "equalStartDate ", sequence = 1, ignoreException = false, hawkParam = "var innings,var startDate ")public     Set<Inning> equalStartDate (Object ... args ){Set<Inning> input = null;java.util.Date  startDate = null;if(args == null || args.length == 0){return null;}if(args.length == 2){if ( args[0] != null){input  = (Set<Inning> ) args[0];}if ( args[1] != null){startDate = ( java.util.Date ) args[1];}}else if(args.length == 1){startDate = ( java.util.Date ) args[0];}Set<Inning> result = new TreeSet<Inning>();for(Inning inning : this.getInnings().getAll()){if(inning.getStartDate ().equals(startDate )){result.add(inning);}}if(input != null && !input.isEmpty() ){if(input.retainAll(result)){result = input;}else{result = new TreeSet<Inning>();}}return result;}


@SubTask(name = "equalOdi ", sequence = 1, ignoreException = false, hawkParam = "var innings,var odi ")public     Set<Inning> equalOdi (Object ... args ){Set<Inning> input = null;java.lang.Integer  odi = null;if(args == null || args.length == 0){return null;}if(args.length == 2){if ( args[0] != null){input  = (Set<Inning> ) args[0];}if ( args[1] != null){odi = ( java.lang.Integer ) args[1];}}else if(args.length == 1){odi = ( java.lang.Integer ) args[0];}Set<Inning> result = new TreeSet<Inning>();for(Inning inning : this.getInnings().getAll()){if(inning.getOdi ().equals(odi )){result.add(inning);}}if(input != null && !input.isEmpty() ){if(input.retainAll(result)){result = input;}else{result = new TreeSet<Inning>();}}return result;}


@SubTask(name = "equalWasOut ", sequence = 1, ignoreException = false, hawkParam = "var innings,var wasOut ")public     Set<Inning> equalWasOut (Object ... args ){Set<Inning> input = null;java.lang.Boolean  wasOut = null;if(args == null || args.length == 0){return null;}if(args.length == 2){if ( args[0] != null){input  = (Set<Inning> ) args[0];}if ( args[1] != null){wasOut = ( java.lang.Boolean ) args[1];}}else if(args.length == 1){wasOut = ( java.lang.Boolean ) args[0];}Set<Inning> result = new TreeSet<Inning>();for(Inning inning : this.getInnings().getAll()){if(inning.getWasOut ().equals(wasOut )){result.add(inning);}}if(input != null && !input.isEmpty() ){if(input.retainAll(result)){result = input;}else{result = new TreeSet<Inning>();}}return result;}


@SubTask(name = "equalBatted ", sequence = 1, ignoreException = false, hawkParam = "var innings,var batted ")public     Set<Inning> equalBatted (Object ... args ){Set<Inning> input = null;java.lang.Boolean  batted = null;if(args == null || args.length == 0){return null;}if(args.length == 2){if ( args[0] != null){input  = (Set<Inning> ) args[0];}if ( args[1] != null){batted = ( java.lang.Boolean ) args[1];}}else if(args.length == 1){batted = ( java.lang.Boolean ) args[0];}Set<Inning> result = new TreeSet<Inning>();for(Inning inning : this.getInnings().getAll()){if(inning.getBatted ().equals(batted )){result.add(inning);}}if(input != null && !input.isEmpty() ){if(input.retainAll(result)){result = input;}else{result = new TreeSet<Inning>();}}return result;}

