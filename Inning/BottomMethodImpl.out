
@SubTask(name = "bottomRuns ", sequence = 1, ignoreException = false, hawkParam = "var innings,var runs ")public     Inning [] bottomRuns (Object ... args ){Integer count = 10;Inning []  tmpArray = this.sortRuns (args);if( tmpArray == null){return null;}if( args.length == 2 ){count = (Integer)args[1];}Inning [] result = new Inning [count] ;for(int i=0;i<count;i++){result[i] = tmpArray[tmpArray.length-i-1];}return result;}


@SubTask(name = "bottomMins ", sequence = 1, ignoreException = false, hawkParam = "var innings,var mins ")public     Inning [] bottomMins (Object ... args ){Integer count = 10;Inning []  tmpArray = this.sortMins (args);if( tmpArray == null){return null;}if( args.length == 2 ){count = (Integer)args[1];}Inning [] result = new Inning [count] ;for(int i=0;i<count;i++){result[i] = tmpArray[tmpArray.length-i-1];}return result;}


@SubTask(name = "bottomBallFaced ", sequence = 1, ignoreException = false, hawkParam = "var innings,var ballFaced ")public     Inning [] bottomBallFaced (Object ... args ){Integer count = 10;Inning []  tmpArray = this.sortBallFaced (args);if( tmpArray == null){return null;}if( args.length == 2 ){count = (Integer)args[1];}Inning [] result = new Inning [count] ;for(int i=0;i<count;i++){result[i] = tmpArray[tmpArray.length-i-1];}return result;}


@SubTask(name = "bottomFours ", sequence = 1, ignoreException = false, hawkParam = "var innings,var fours ")public     Inning [] bottomFours (Object ... args ){Integer count = 10;Inning []  tmpArray = this.sortFours (args);if( tmpArray == null){return null;}if( args.length == 2 ){count = (Integer)args[1];}Inning [] result = new Inning [count] ;for(int i=0;i<count;i++){result[i] = tmpArray[tmpArray.length-i-1];}return result;}


@SubTask(name = "bottomSixes ", sequence = 1, ignoreException = false, hawkParam = "var innings,var sixes ")public     Inning [] bottomSixes (Object ... args ){Integer count = 10;Inning []  tmpArray = this.sortSixes (args);if( tmpArray == null){return null;}if( args.length == 2 ){count = (Integer)args[1];}Inning [] result = new Inning [count] ;for(int i=0;i<count;i++){result[i] = tmpArray[tmpArray.length-i-1];}return result;}


@SubTask(name = "bottomStrikeRate ", sequence = 1, ignoreException = false, hawkParam = "var innings,var strikeRate ")public     Inning [] bottomStrikeRate (Object ... args ){Integer count = 10;Inning []  tmpArray = this.sortStrikeRate (args);if( tmpArray == null){return null;}if( args.length == 2 ){count = (Integer)args[1];}Inning [] result = new Inning [count] ;for(int i=0;i<count;i++){result[i] = tmpArray[tmpArray.length-i-1];}return result;}


@SubTask(name = "bottomPositions ", sequence = 1, ignoreException = false, hawkParam = "var innings,var positions ")public     Inning [] bottomPositions (Object ... args ){Integer count = 10;Inning []  tmpArray = this.sortPositions (args);if( tmpArray == null){return null;}if( args.length == 2 ){count = (Integer)args[1];}Inning [] result = new Inning [count] ;for(int i=0;i<count;i++){result[i] = tmpArray[tmpArray.length-i-1];}return result;}


@SubTask(name = "bottomInnings ", sequence = 1, ignoreException = false, hawkParam = "var innings,var innings ")public     Inning [] bottomInnings (Object ... args ){Integer count = 10;Inning []  tmpArray = this.sortInnings (args);if( tmpArray == null){return null;}if( args.length == 2 ){count = (Integer)args[1];}Inning [] result = new Inning [count] ;for(int i=0;i<count;i++){result[i] = tmpArray[tmpArray.length-i-1];}return result;}


@SubTask(name = "bottomOdi ", sequence = 1, ignoreException = false, hawkParam = "var innings,var odi ")public     Inning [] bottomOdi (Object ... args ){Integer count = 10;Inning []  tmpArray = this.sortOdi (args);if( tmpArray == null){return null;}if( args.length == 2 ){count = (Integer)args[1];}Inning [] result = new Inning [count] ;for(int i=0;i<count;i++){result[i] = tmpArray[tmpArray.length-i-1];}return result;}

