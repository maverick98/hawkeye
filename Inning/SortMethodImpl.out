
@SubTask(name = "sortPlayer ", sequence = 1, ignoreException = false, hawkParam = "var innings,var player ")public     Inning [] sortPlayer (Object ... args ){if(args == null || args.length == 0){return null;}Set<Inning> input = null;input  = (Set<Inning> ) args[0];Set<Inning> tmpSet = null;if(input != null && !input.isEmpty() ){tmpSet = input;}else{tmpSet = this.getInnings().getAll();}Comparator<Inning> cmp = java.util.Comparator.comparing(Inning::getPlayer);return tmpSet.stream().sorted(cmp).toArray(size->new Inning[size]);}


@SubTask(name = "sortRuns ", sequence = 1, ignoreException = false, hawkParam = "var innings,var runs ")public     Inning [] sortRuns (Object ... args ){if(args == null || args.length == 0){return null;}Set<Inning> input = null;input  = (Set<Inning> ) args[0];Set<Inning> tmpSet = null;if(input != null && !input.isEmpty() ){tmpSet = input;}else{tmpSet = this.getInnings().getAll();}Comparator<Inning> cmp = java.util.Comparator.comparing(Inning::getRuns);return tmpSet.stream().sorted(cmp).toArray(size->new Inning[size]);}


@SubTask(name = "sortMins ", sequence = 1, ignoreException = false, hawkParam = "var innings,var mins ")public     Inning [] sortMins (Object ... args ){if(args == null || args.length == 0){return null;}Set<Inning> input = null;input  = (Set<Inning> ) args[0];Set<Inning> tmpSet = null;if(input != null && !input.isEmpty() ){tmpSet = input;}else{tmpSet = this.getInnings().getAll();}Comparator<Inning> cmp = java.util.Comparator.comparing(Inning::getMins);return tmpSet.stream().sorted(cmp).toArray(size->new Inning[size]);}


@SubTask(name = "sortBallFaced ", sequence = 1, ignoreException = false, hawkParam = "var innings,var ballFaced ")public     Inning [] sortBallFaced (Object ... args ){if(args == null || args.length == 0){return null;}Set<Inning> input = null;input  = (Set<Inning> ) args[0];Set<Inning> tmpSet = null;if(input != null && !input.isEmpty() ){tmpSet = input;}else{tmpSet = this.getInnings().getAll();}Comparator<Inning> cmp = java.util.Comparator.comparing(Inning::getBallFaced);return tmpSet.stream().sorted(cmp).toArray(size->new Inning[size]);}


@SubTask(name = "sortFours ", sequence = 1, ignoreException = false, hawkParam = "var innings,var fours ")public     Inning [] sortFours (Object ... args ){if(args == null || args.length == 0){return null;}Set<Inning> input = null;input  = (Set<Inning> ) args[0];Set<Inning> tmpSet = null;if(input != null && !input.isEmpty() ){tmpSet = input;}else{tmpSet = this.getInnings().getAll();}Comparator<Inning> cmp = java.util.Comparator.comparing(Inning::getFours);return tmpSet.stream().sorted(cmp).toArray(size->new Inning[size]);}


@SubTask(name = "sortSixes ", sequence = 1, ignoreException = false, hawkParam = "var innings,var sixes ")public     Inning [] sortSixes (Object ... args ){if(args == null || args.length == 0){return null;}Set<Inning> input = null;input  = (Set<Inning> ) args[0];Set<Inning> tmpSet = null;if(input != null && !input.isEmpty() ){tmpSet = input;}else{tmpSet = this.getInnings().getAll();}Comparator<Inning> cmp = java.util.Comparator.comparing(Inning::getSixes);return tmpSet.stream().sorted(cmp).toArray(size->new Inning[size]);}


@SubTask(name = "sortStrikeRate ", sequence = 1, ignoreException = false, hawkParam = "var innings,var strikeRate ")public     Inning [] sortStrikeRate (Object ... args ){if(args == null || args.length == 0){return null;}Set<Inning> input = null;input  = (Set<Inning> ) args[0];Set<Inning> tmpSet = null;if(input != null && !input.isEmpty() ){tmpSet = input;}else{tmpSet = this.getInnings().getAll();}Comparator<Inning> cmp = java.util.Comparator.comparing(Inning::getStrikeRate);return tmpSet.stream().sorted(cmp).toArray(size->new Inning[size]);}


@SubTask(name = "sortPositions ", sequence = 1, ignoreException = false, hawkParam = "var innings,var positions ")public     Inning [] sortPositions (Object ... args ){if(args == null || args.length == 0){return null;}Set<Inning> input = null;input  = (Set<Inning> ) args[0];Set<Inning> tmpSet = null;if(input != null && !input.isEmpty() ){tmpSet = input;}else{tmpSet = this.getInnings().getAll();}Comparator<Inning> cmp = java.util.Comparator.comparing(Inning::getPositions);return tmpSet.stream().sorted(cmp).toArray(size->new Inning[size]);}


@SubTask(name = "sortDismissalType ", sequence = 1, ignoreException = false, hawkParam = "var innings,var dismissalType ")public     Inning [] sortDismissalType (Object ... args ){if(args == null || args.length == 0){return null;}Set<Inning> input = null;input  = (Set<Inning> ) args[0];Set<Inning> tmpSet = null;if(input != null && !input.isEmpty() ){tmpSet = input;}else{tmpSet = this.getInnings().getAll();}Comparator<Inning> cmp = java.util.Comparator.comparing(Inning::getDismissalType);return tmpSet.stream().sorted(cmp).toArray(size->new Inning[size]);}


@SubTask(name = "sortInnings ", sequence = 1, ignoreException = false, hawkParam = "var innings,var innings ")public     Inning [] sortInnings (Object ... args ){if(args == null || args.length == 0){return null;}Set<Inning> input = null;input  = (Set<Inning> ) args[0];Set<Inning> tmpSet = null;if(input != null && !input.isEmpty() ){tmpSet = input;}else{tmpSet = this.getInnings().getAll();}Comparator<Inning> cmp = java.util.Comparator.comparing(Inning::getInnings);return tmpSet.stream().sorted(cmp).toArray(size->new Inning[size]);}


@SubTask(name = "sortOpposition ", sequence = 1, ignoreException = false, hawkParam = "var innings,var opposition ")public     Inning [] sortOpposition (Object ... args ){if(args == null || args.length == 0){return null;}Set<Inning> input = null;input  = (Set<Inning> ) args[0];Set<Inning> tmpSet = null;if(input != null && !input.isEmpty() ){tmpSet = input;}else{tmpSet = this.getInnings().getAll();}Comparator<Inning> cmp = java.util.Comparator.comparing(Inning::getOpposition);return tmpSet.stream().sorted(cmp).toArray(size->new Inning[size]);}


@SubTask(name = "sortGround ", sequence = 1, ignoreException = false, hawkParam = "var innings,var ground ")public     Inning [] sortGround (Object ... args ){if(args == null || args.length == 0){return null;}Set<Inning> input = null;input  = (Set<Inning> ) args[0];Set<Inning> tmpSet = null;if(input != null && !input.isEmpty() ){tmpSet = input;}else{tmpSet = this.getInnings().getAll();}Comparator<Inning> cmp = java.util.Comparator.comparing(Inning::getGround);return tmpSet.stream().sorted(cmp).toArray(size->new Inning[size]);}


@SubTask(name = "sortStartDate ", sequence = 1, ignoreException = false, hawkParam = "var innings,var startDate ")public     Inning [] sortStartDate (Object ... args ){if(args == null || args.length == 0){return null;}Set<Inning> input = null;input  = (Set<Inning> ) args[0];Set<Inning> tmpSet = null;if(input != null && !input.isEmpty() ){tmpSet = input;}else{tmpSet = this.getInnings().getAll();}Comparator<Inning> cmp = java.util.Comparator.comparing(Inning::getStartDate);return tmpSet.stream().sorted(cmp).toArray(size->new Inning[size]);}


@SubTask(name = "sortOdi ", sequence = 1, ignoreException = false, hawkParam = "var innings,var odi ")public     Inning [] sortOdi (Object ... args ){if(args == null || args.length == 0){return null;}Set<Inning> input = null;input  = (Set<Inning> ) args[0];Set<Inning> tmpSet = null;if(input != null && !input.isEmpty() ){tmpSet = input;}else{tmpSet = this.getInnings().getAll();}Comparator<Inning> cmp = java.util.Comparator.comparing(Inning::getOdi);return tmpSet.stream().sorted(cmp).toArray(size->new Inning[size]);}


@SubTask(name = "sortWasOut ", sequence = 1, ignoreException = false, hawkParam = "var innings,var wasOut ")public     Inning [] sortWasOut (Object ... args ){if(args == null || args.length == 0){return null;}Set<Inning> input = null;input  = (Set<Inning> ) args[0];Set<Inning> tmpSet = null;if(input != null && !input.isEmpty() ){tmpSet = input;}else{tmpSet = this.getInnings().getAll();}Comparator<Inning> cmp = java.util.Comparator.comparing(Inning::getWasOut);return tmpSet.stream().sorted(cmp).toArray(size->new Inning[size]);}


@SubTask(name = "sortBatted ", sequence = 1, ignoreException = false, hawkParam = "var innings,var batted ")public     Inning [] sortBatted (Object ... args ){if(args == null || args.length == 0){return null;}Set<Inning> input = null;input  = (Set<Inning> ) args[0];Set<Inning> tmpSet = null;if(input != null && !input.isEmpty() ){tmpSet = input;}else{tmpSet = this.getInnings().getAll();}Comparator<Inning> cmp = java.util.Comparator.comparing(Inning::getBatted);return tmpSet.stream().sorted(cmp).toArray(size->new Inning[size]);}

