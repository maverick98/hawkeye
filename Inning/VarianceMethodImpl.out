
@SubTask(name = "varianceRuns ", sequence = 1, ignoreException = false, hawkParam = "var innings ")public    double varianceRuns (Object ... args ){Set<Inning> input = null;if ( args[0] != null){input  = (Set<Inning> ) args[0];}Set<Inning> tmpSet = null;if(input != null && !input.isEmpty() ){tmpSet = input;}else{tmpSet = this.getInnings().getAll();}int i =0;BigDecimal squaredTotal = BigDecimal.ZERO;double sqauredTotalAvg = 0.0;for (Inning inning : tmpSet) {squaredTotal = squaredTotal.add(new BigDecimal(inning.getRuns () * inning.getRuns ()));i++;}if (i > 0) {sqauredTotalAvg = squaredTotal.divide(new BigDecimal(i), 2, RoundingMode.HALF_UP).doubleValue();}double avg = this.avgRuns (args);double variance =sqauredTotalAvg - (avg * avg);return variance;}


@SubTask(name = "varianceMins ", sequence = 1, ignoreException = false, hawkParam = "var innings ")public    double varianceMins (Object ... args ){Set<Inning> input = null;if ( args[0] != null){input  = (Set<Inning> ) args[0];}Set<Inning> tmpSet = null;if(input != null && !input.isEmpty() ){tmpSet = input;}else{tmpSet = this.getInnings().getAll();}int i =0;BigDecimal squaredTotal = BigDecimal.ZERO;double sqauredTotalAvg = 0.0;for (Inning inning : tmpSet) {squaredTotal = squaredTotal.add(new BigDecimal(inning.getMins () * inning.getMins ()));i++;}if (i > 0) {sqauredTotalAvg = squaredTotal.divide(new BigDecimal(i), 2, RoundingMode.HALF_UP).doubleValue();}double avg = this.avgMins (args);double variance =sqauredTotalAvg - (avg * avg);return variance;}


@SubTask(name = "varianceBallFaced ", sequence = 1, ignoreException = false, hawkParam = "var innings ")public    double varianceBallFaced (Object ... args ){Set<Inning> input = null;if ( args[0] != null){input  = (Set<Inning> ) args[0];}Set<Inning> tmpSet = null;if(input != null && !input.isEmpty() ){tmpSet = input;}else{tmpSet = this.getInnings().getAll();}int i =0;BigDecimal squaredTotal = BigDecimal.ZERO;double sqauredTotalAvg = 0.0;for (Inning inning : tmpSet) {squaredTotal = squaredTotal.add(new BigDecimal(inning.getBallFaced () * inning.getBallFaced ()));i++;}if (i > 0) {sqauredTotalAvg = squaredTotal.divide(new BigDecimal(i), 2, RoundingMode.HALF_UP).doubleValue();}double avg = this.avgBallFaced (args);double variance =sqauredTotalAvg - (avg * avg);return variance;}


@SubTask(name = "varianceFours ", sequence = 1, ignoreException = false, hawkParam = "var innings ")public    double varianceFours (Object ... args ){Set<Inning> input = null;if ( args[0] != null){input  = (Set<Inning> ) args[0];}Set<Inning> tmpSet = null;if(input != null && !input.isEmpty() ){tmpSet = input;}else{tmpSet = this.getInnings().getAll();}int i =0;BigDecimal squaredTotal = BigDecimal.ZERO;double sqauredTotalAvg = 0.0;for (Inning inning : tmpSet) {squaredTotal = squaredTotal.add(new BigDecimal(inning.getFours () * inning.getFours ()));i++;}if (i > 0) {sqauredTotalAvg = squaredTotal.divide(new BigDecimal(i), 2, RoundingMode.HALF_UP).doubleValue();}double avg = this.avgFours (args);double variance =sqauredTotalAvg - (avg * avg);return variance;}


@SubTask(name = "varianceSixes ", sequence = 1, ignoreException = false, hawkParam = "var innings ")public    double varianceSixes (Object ... args ){Set<Inning> input = null;if ( args[0] != null){input  = (Set<Inning> ) args[0];}Set<Inning> tmpSet = null;if(input != null && !input.isEmpty() ){tmpSet = input;}else{tmpSet = this.getInnings().getAll();}int i =0;BigDecimal squaredTotal = BigDecimal.ZERO;double sqauredTotalAvg = 0.0;for (Inning inning : tmpSet) {squaredTotal = squaredTotal.add(new BigDecimal(inning.getSixes () * inning.getSixes ()));i++;}if (i > 0) {sqauredTotalAvg = squaredTotal.divide(new BigDecimal(i), 2, RoundingMode.HALF_UP).doubleValue();}double avg = this.avgSixes (args);double variance =sqauredTotalAvg - (avg * avg);return variance;}


@SubTask(name = "varianceStrikeRate ", sequence = 1, ignoreException = false, hawkParam = "var innings ")public    double varianceStrikeRate (Object ... args ){Set<Inning> input = null;if ( args[0] != null){input  = (Set<Inning> ) args[0];}Set<Inning> tmpSet = null;if(input != null && !input.isEmpty() ){tmpSet = input;}else{tmpSet = this.getInnings().getAll();}int i =0;BigDecimal squaredTotal = BigDecimal.ZERO;double sqauredTotalAvg = 0.0;for (Inning inning : tmpSet) {squaredTotal = squaredTotal.add(new BigDecimal(inning.getStrikeRate () * inning.getStrikeRate ()));i++;}if (i > 0) {sqauredTotalAvg = squaredTotal.divide(new BigDecimal(i), 2, RoundingMode.HALF_UP).doubleValue();}double avg = this.avgStrikeRate (args);double variance =sqauredTotalAvg - (avg * avg);return variance;}


@SubTask(name = "variancePositions ", sequence = 1, ignoreException = false, hawkParam = "var innings ")public    double variancePositions (Object ... args ){Set<Inning> input = null;if ( args[0] != null){input  = (Set<Inning> ) args[0];}Set<Inning> tmpSet = null;if(input != null && !input.isEmpty() ){tmpSet = input;}else{tmpSet = this.getInnings().getAll();}int i =0;BigDecimal squaredTotal = BigDecimal.ZERO;double sqauredTotalAvg = 0.0;for (Inning inning : tmpSet) {squaredTotal = squaredTotal.add(new BigDecimal(inning.getPositions () * inning.getPositions ()));i++;}if (i > 0) {sqauredTotalAvg = squaredTotal.divide(new BigDecimal(i), 2, RoundingMode.HALF_UP).doubleValue();}double avg = this.avgPositions (args);double variance =sqauredTotalAvg - (avg * avg);return variance;}


@SubTask(name = "varianceInnings ", sequence = 1, ignoreException = false, hawkParam = "var innings ")public    double varianceInnings (Object ... args ){Set<Inning> input = null;if ( args[0] != null){input  = (Set<Inning> ) args[0];}Set<Inning> tmpSet = null;if(input != null && !input.isEmpty() ){tmpSet = input;}else{tmpSet = this.getInnings().getAll();}int i =0;BigDecimal squaredTotal = BigDecimal.ZERO;double sqauredTotalAvg = 0.0;for (Inning inning : tmpSet) {squaredTotal = squaredTotal.add(new BigDecimal(inning.getInnings () * inning.getInnings ()));i++;}if (i > 0) {sqauredTotalAvg = squaredTotal.divide(new BigDecimal(i), 2, RoundingMode.HALF_UP).doubleValue();}double avg = this.avgInnings (args);double variance =sqauredTotalAvg - (avg * avg);return variance;}


@SubTask(name = "varianceOdi ", sequence = 1, ignoreException = false, hawkParam = "var innings ")public    double varianceOdi (Object ... args ){Set<Inning> input = null;if ( args[0] != null){input  = (Set<Inning> ) args[0];}Set<Inning> tmpSet = null;if(input != null && !input.isEmpty() ){tmpSet = input;}else{tmpSet = this.getInnings().getAll();}int i =0;BigDecimal squaredTotal = BigDecimal.ZERO;double sqauredTotalAvg = 0.0;for (Inning inning : tmpSet) {squaredTotal = squaredTotal.add(new BigDecimal(inning.getOdi () * inning.getOdi ()));i++;}if (i > 0) {sqauredTotalAvg = squaredTotal.divide(new BigDecimal(i), 2, RoundingMode.HALF_UP).doubleValue();}double avg = this.avgOdi (args);double variance =sqauredTotalAvg - (avg * avg);return variance;}

