
@SubTask(name = "lessThanPlayer ", sequence = 1, ignoreException = false, hawkParam = "var innings,var player ")public     Set<Inning> lessThanPlayer (Object ... args ){Set<Inning> input = null;org.cricket.hawkeye.db.Player  player = null;if(args == null || args.length == 0){return null;}if(args.length == 2){if ( args[0] != null){input  = (Set<Inning> ) args[0];}if ( args[1] != null){player = ( org.cricket.hawkeye.db.Player ) args[1];}}else if(args.length == 1){player = ( org.cricket.hawkeye.db.Player ) args[0];}Set<Inning> result = new TreeSet<Inning>();for(Inning inning : this.getInnings().getAll()){if(inning.getPlayer ().compareTo(player ) < 0){result.add(inning);}}if(input != null && !input.isEmpty() ){if(input.retainAll(result)){result = input;}else{result = new TreeSet<Inning>();}}return result;}


@SubTask(name = "lessThanRuns ", sequence = 1, ignoreException = false, hawkParam = "var innings,var runs ")public     Set<Inning> lessThanRuns (Object ... args ){Set<Inning> input = null;java.lang.Integer  runs = null;if(args == null || args.length == 0){return null;}if(args.length == 2){if ( args[0] != null){input  = (Set<Inning> ) args[0];}if ( args[1] != null){runs = ( java.lang.Integer ) args[1];}}else if(args.length == 1){runs = ( java.lang.Integer ) args[0];}Set<Inning> result = new TreeSet<Inning>();for(Inning inning : this.getInnings().getAll()){if(inning.getRuns ().compareTo(runs ) < 0){result.add(inning);}}if(input != null && !input.isEmpty() ){if(input.retainAll(result)){result = input;}else{result = new TreeSet<Inning>();}}return result;}


@SubTask(name = "lessThanMins ", sequence = 1, ignoreException = false, hawkParam = "var innings,var mins ")public     Set<Inning> lessThanMins (Object ... args ){Set<Inning> input = null;java.lang.Integer  mins = null;if(args == null || args.length == 0){return null;}if(args.length == 2){if ( args[0] != null){input  = (Set<Inning> ) args[0];}if ( args[1] != null){mins = ( java.lang.Integer ) args[1];}}else if(args.length == 1){mins = ( java.lang.Integer ) args[0];}Set<Inning> result = new TreeSet<Inning>();for(Inning inning : this.getInnings().getAll()){if(inning.getMins ().compareTo(mins ) < 0){result.add(inning);}}if(input != null && !input.isEmpty() ){if(input.retainAll(result)){result = input;}else{result = new TreeSet<Inning>();}}return result;}


@SubTask(name = "lessThanBallFaced ", sequence = 1, ignoreException = false, hawkParam = "var innings,var ballFaced ")public     Set<Inning> lessThanBallFaced (Object ... args ){Set<Inning> input = null;java.lang.Integer  ballFaced = null;if(args == null || args.length == 0){return null;}if(args.length == 2){if ( args[0] != null){input  = (Set<Inning> ) args[0];}if ( args[1] != null){ballFaced = ( java.lang.Integer ) args[1];}}else if(args.length == 1){ballFaced = ( java.lang.Integer ) args[0];}Set<Inning> result = new TreeSet<Inning>();for(Inning inning : this.getInnings().getAll()){if(inning.getBallFaced ().compareTo(ballFaced ) < 0){result.add(inning);}}if(input != null && !input.isEmpty() ){if(input.retainAll(result)){result = input;}else{result = new TreeSet<Inning>();}}return result;}


@SubTask(name = "lessThanFours ", sequence = 1, ignoreException = false, hawkParam = "var innings,var fours ")public     Set<Inning> lessThanFours (Object ... args ){Set<Inning> input = null;java.lang.Integer  fours = null;if(args == null || args.length == 0){return null;}if(args.length == 2){if ( args[0] != null){input  = (Set<Inning> ) args[0];}if ( args[1] != null){fours = ( java.lang.Integer ) args[1];}}else if(args.length == 1){fours = ( java.lang.Integer ) args[0];}Set<Inning> result = new TreeSet<Inning>();for(Inning inning : this.getInnings().getAll()){if(inning.getFours ().compareTo(fours ) < 0){result.add(inning);}}if(input != null && !input.isEmpty() ){if(input.retainAll(result)){result = input;}else{result = new TreeSet<Inning>();}}return result;}


@SubTask(name = "lessThanSixes ", sequence = 1, ignoreException = false, hawkParam = "var innings,var sixes ")public     Set<Inning> lessThanSixes (Object ... args ){Set<Inning> input = null;java.lang.Integer  sixes = null;if(args == null || args.length == 0){return null;}if(args.length == 2){if ( args[0] != null){input  = (Set<Inning> ) args[0];}if ( args[1] != null){sixes = ( java.lang.Integer ) args[1];}}else if(args.length == 1){sixes = ( java.lang.Integer ) args[0];}Set<Inning> result = new TreeSet<Inning>();for(Inning inning : this.getInnings().getAll()){if(inning.getSixes ().compareTo(sixes ) < 0){result.add(inning);}}if(input != null && !input.isEmpty() ){if(input.retainAll(result)){result = input;}else{result = new TreeSet<Inning>();}}return result;}


@SubTask(name = "lessThanStrikeRate ", sequence = 1, ignoreException = false, hawkParam = "var innings,var strikeRate ")public     Set<Inning> lessThanStrikeRate (Object ... args ){Set<Inning> input = null;java.lang.Float  strikeRate = null;if(args == null || args.length == 0){return null;}if(args.length == 2){if ( args[0] != null){input  = (Set<Inning> ) args[0];}if ( args[1] != null){strikeRate = ( java.lang.Float ) args[1];}}else if(args.length == 1){strikeRate = ( java.lang.Float ) args[0];}Set<Inning> result = new TreeSet<Inning>();for(Inning inning : this.getInnings().getAll()){if(inning.getStrikeRate ().compareTo(strikeRate ) < 0){result.add(inning);}}if(input != null && !input.isEmpty() ){if(input.retainAll(result)){result = input;}else{result = new TreeSet<Inning>();}}return result;}


@SubTask(name = "lessThanPositions ", sequence = 1, ignoreException = false, hawkParam = "var innings,var positions ")public     Set<Inning> lessThanPositions (Object ... args ){Set<Inning> input = null;java.lang.Integer  positions = null;if(args == null || args.length == 0){return null;}if(args.length == 2){if ( args[0] != null){input  = (Set<Inning> ) args[0];}if ( args[1] != null){positions = ( java.lang.Integer ) args[1];}}else if(args.length == 1){positions = ( java.lang.Integer ) args[0];}Set<Inning> result = new TreeSet<Inning>();for(Inning inning : this.getInnings().getAll()){if(inning.getPositions ().compareTo(positions ) < 0){result.add(inning);}}if(input != null && !input.isEmpty() ){if(input.retainAll(result)){result = input;}else{result = new TreeSet<Inning>();}}return result;}


@SubTask(name = "lessThanInnings ", sequence = 1, ignoreException = false, hawkParam = "var innings,var innings ")public     Set<Inning> lessThanInnings (Object ... args ){Set<Inning> input = null;java.lang.Integer  innings = null;if(args == null || args.length == 0){return null;}if(args.length == 2){if ( args[0] != null){input  = (Set<Inning> ) args[0];}if ( args[1] != null){innings = ( java.lang.Integer ) args[1];}}else if(args.length == 1){innings = ( java.lang.Integer ) args[0];}Set<Inning> result = new TreeSet<Inning>();for(Inning inning : this.getInnings().getAll()){if(inning.getInnings ().compareTo(innings ) < 0){result.add(inning);}}if(input != null && !input.isEmpty() ){if(input.retainAll(result)){result = input;}else{result = new TreeSet<Inning>();}}return result;}


@SubTask(name = "lessThanOpposition ", sequence = 1, ignoreException = false, hawkParam = "var innings,var opposition ")public     Set<Inning> lessThanOpposition (Object ... args ){Set<Inning> input = null;org.cricket.hawkeye.db.Country  opposition = null;if(args == null || args.length == 0){return null;}if(args.length == 2){if ( args[0] != null){input  = (Set<Inning> ) args[0];}if ( args[1] != null){opposition = ( org.cricket.hawkeye.db.Country ) args[1];}}else if(args.length == 1){opposition = ( org.cricket.hawkeye.db.Country ) args[0];}Set<Inning> result = new TreeSet<Inning>();for(Inning inning : this.getInnings().getAll()){if(inning.getOpposition ().compareTo(opposition ) < 0){result.add(inning);}}if(input != null && !input.isEmpty() ){if(input.retainAll(result)){result = input;}else{result = new TreeSet<Inning>();}}return result;}


@SubTask(name = "lessThanGround ", sequence = 1, ignoreException = false, hawkParam = "var innings,var ground ")public     Set<Inning> lessThanGround (Object ... args ){Set<Inning> input = null;org.cricket.hawkeye.db.Ground  ground = null;if(args == null || args.length == 0){return null;}if(args.length == 2){if ( args[0] != null){input  = (Set<Inning> ) args[0];}if ( args[1] != null){ground = ( org.cricket.hawkeye.db.Ground ) args[1];}}else if(args.length == 1){ground = ( org.cricket.hawkeye.db.Ground ) args[0];}Set<Inning> result = new TreeSet<Inning>();for(Inning inning : this.getInnings().getAll()){if(inning.getGround ().compareTo(ground ) < 0){result.add(inning);}}if(input != null && !input.isEmpty() ){if(input.retainAll(result)){result = input;}else{result = new TreeSet<Inning>();}}return result;}


@SubTask(name = "lessThanStartDate ", sequence = 1, ignoreException = false, hawkParam = "var innings,var startDate ")public     Set<Inning> lessThanStartDate (Object ... args ){Set<Inning> input = null;java.util.Date  startDate = null;if(args == null || args.length == 0){return null;}if(args.length == 2){if ( args[0] != null){input  = (Set<Inning> ) args[0];}if ( args[1] != null){startDate = ( java.util.Date ) args[1];}}else if(args.length == 1){startDate = ( java.util.Date ) args[0];}Set<Inning> result = new TreeSet<Inning>();for(Inning inning : this.getInnings().getAll()){if(inning.getStartDate ().compareTo(startDate ) < 0){result.add(inning);}}if(input != null && !input.isEmpty() ){if(input.retainAll(result)){result = input;}else{result = new TreeSet<Inning>();}}return result;}


@SubTask(name = "lessThanOdi ", sequence = 1, ignoreException = false, hawkParam = "var innings,var odi ")public     Set<Inning> lessThanOdi (Object ... args ){Set<Inning> input = null;java.lang.Integer  odi = null;if(args == null || args.length == 0){return null;}if(args.length == 2){if ( args[0] != null){input  = (Set<Inning> ) args[0];}if ( args[1] != null){odi = ( java.lang.Integer ) args[1];}}else if(args.length == 1){odi = ( java.lang.Integer ) args[0];}Set<Inning> result = new TreeSet<Inning>();for(Inning inning : this.getInnings().getAll()){if(inning.getOdi ().compareTo(odi ) < 0){result.add(inning);}}if(input != null && !input.isEmpty() ){if(input.retainAll(result)){result = input;}else{result = new TreeSet<Inning>();}}return result;}

