function main()
{
exec  createCopyrightInfo()
>
>package org.cricket.hawkeye.db;
>
>import java.io.IOException;
>import java.io.ObjectInput;
>import java.io.ObjectOutput;
>import java.util.Set;
>import java.util.TreeSet;
>import java.io.Externalizable;
>import java.io.File;
>import java.io.FileInputStream;
>import java.io.FileOutputStream;
>import java.io.ObjectInputStream;
>import java.io.ObjectOutputStream;
>import java.util.zip.Deflater;
>import java.util.zip.GZIPInputStream;
>import java.util.zip.GZIPOutputStream;
>import org.cricket.hawkeye.service.CommonServiceImpl;
>import org.cricket.hawkeye.service.ICommonService;
>
>
>/**
> *
> * @author msahu
> */
>
>
>public class #CLAZZ#s implements Externalizable
>{
>
>    private  static final #CLAZZ#s theInstance = new #CLAZZ#s ();
>
>    private   Set<#CLAZZ#> all = null;
>
>    private  final String FILE="#CLAZZ#s.tab";
>
>    
>    ICommonService commonService = new CommonServiceImpl();
>
>    private #CLAZZ#s (){
>        init();
>    }
>
>    public static #CLAZZ#s getInstance(){
>        return theInstance;
>    }	
>
>    public ICommonService getCommonService() {
>        return commonService;
>    }			
>    		
>
>    public   Set<#CLAZZ#> getAll() {
>        return all;
>    }
>	
>    public   boolean init() 
>    {
>        	
>        Set<#CLAZZ#> result = null;
>        FileInputStream fi = null;
>        ObjectInputStream si = null;
>	GZIPInputStream gi = null;
>	String tabPath = this.getCommonService().getTabPath();
>        String #CLAZZINSTANCE#TabPath = tabPath+File.separator+FILE;  	    
>        try 
>        {
>            fi = new FileInputStream(#CLAZZINSTANCE#TabPath);
>            gi = new GZIPInputStream(fi);
>            si = new ObjectInputStream(gi);
>            result = (Set<#CLAZZ#>)si.readObject();
>
>        }catch (Exception e) 
>        {
>            e.printStackTrace();
>        }
>        finally
>        {
>                try 
>                {
>                        if (si != null) {
>                    		si.close();
>                	}
>		        if (gi != null) {
>		            gi.close();
>		        }
>		        if (fi != null) {
>		            fi.close();
>		        }
>                } catch (IOException e1) 
>                {
>
>                        e1.printStackTrace();
>                }
>
>        }
>        
>       all =  result!=null?result:new TreeSet<#CLAZZ#>(); 
>
>       return true;	
>    }
>    public boolean insert(#CLAZZ# #CLAZZINSTANCE#)
>    {
>        return all.add(#CLAZZINSTANCE#);
>    }
>    
>    public boolean update(#CLAZZ# #CLAZZINSTANCE#)
>    {
>        boolean result=true;
>        if(all.contains(#CLAZZINSTANCE#))
>        {
>            all.remove(#CLAZZINSTANCE#);
>            all.add(#CLAZZINSTANCE#);
>            result=true;
>        }else
>        {
>            result=false;
>        }
>        return result;
>    }
>    
>    public boolean delete(#CLAZZ# #CLAZZINSTANCE#)
>    {
>        return all.remove(#CLAZZINSTANCE#);
>    }
>
>    @Override
echo ""
>    public void writeExternal(ObjectOutput out) throws IOException 
>    {
>        out.writeObject(all);
>    }
>    
>    @Override
echo ""
>    public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException 
>    {
>        all = (Set<#CLAZZ#>)in.readObject();
>                
>    }
>    public void flush()
>    {
>	FileOutputStream fo=null;
>        ObjectOutputStream so=null;
>        GZIPOutputStream go = null;
>        try 
>        {
>    
>            String tabPath = this.getCommonService().getTabPath();
>            String #CLAZZINSTANCE#TabPath = tabPath+File.separator+FILE;      
>            fo = new FileOutputStream(#CLAZZINSTANCE#TabPath);
>            go = new GZIPOutputStream(fo) {
>
>                {
>
>                    def.setLevel(Deflater.BEST_COMPRESSION);
>                }
>            };
>            so = new ObjectOutputStream(go);
>            so.writeObject(all);
>            so.flush();
>        } catch (Exception e) {
>            e.printStackTrace();
>        }finally
>        {
>                try {
>                        if (so != null) {
>		            so.close();
>		        }
>
>		        if (go != null) {
>		            go.close();
>		        }
>		        if (fo != null) {
>		            fo.close();
>		        }
>                } catch (IOException e1) 
>                {
>
>                        e1.printStackTrace();
>                }
>
>        }
>	
>		
>    }
>}
}
function createCopyrightInfo()
{	 
>
>
>	/**This file was generated at #DATE# 
>	  *Don't you dare edit this file.You will regret it if you do!!! 
>	  * This file is part of hawkeye 
>	  * CopyLeft (C) 2012-2013 Manoranjan Sahu, All Rights are left.
>	  *
>	  */
}

